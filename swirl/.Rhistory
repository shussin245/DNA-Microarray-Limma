library(CGPfunctions)
dongtable5_long = dongtable5 %>%
pivot_longer(cols = starts_with("conc_"),
names_to = "growth_rate",
values_to = "concentration") %>%
mutate(growth_rate = case_when(
growth_rate == "conc_0.4"  ~ 0.4,
growth_rate == "conc_0.7"  ~ 0.7,
growth_rate == "conc_1.07" ~ 1.07,
growth_rate == "conc_1.6"  ~ 1.6,
growth_rate == "conc_2.5"  ~ 2.5
))
newggslopegraph(dongtable5_long,
Times = growth_rate,  # The growth rates (doublings per hour)
Measurement = concentration,  # Concentration values
Grouping = tRNA,   # The tRNA isoacceptor species
Title = "Slopegraph of tRNA Isoacceptor for Growth Rates",
SubTitle = "From 0.4 to 2.5 doublings/hour",
Caption = "Data source: dongtable5")
library(CGPfunctions)
library(tidyr)
library(dplyr)
# Reshaping the data into long format and converting growth_rate to character
dongtable5_long <- dongtable5 %>%
pivot_longer(cols = starts_with("conc_"),
names_to = "growth_rate",
values_to = "concentration") %>%
mutate(growth_rate = case_when(
growth_rate == "conc_0.4"  ~ "0.4",
growth_rate == "conc_0.7"  ~ "0.7",
growth_rate == "conc_1.07" ~ "1.07",
growth_rate == "conc_1.6"  ~ "1.6",
growth_rate == "conc_2.5"  ~ "2.5"
)) %>%
mutate(growth_rate = factor(growth_rate, levels = c("0.4", "0.7", "1.07", "1.6", "2.5"), ordered = TRUE))
newggslopegraph(dongtable5_long,
Times = growth_rate,  # The growth rates (doublings per hour)
Measurement = concentration,  # Concentration values
Grouping = tRNA,   # The tRNA isoacceptor species
Title = "Slopegraph of tRNA Isoacceptor for Growth Rates",
SubTitle = "From 0.4 to 2.5 doublings/hour",
Caption = "Data source: dongtable5")
library(CGPfunctions)
# Reshaping the data into long format and converting growth_rate to character
dongtable5_long <- dongtable5 %>%
pivot_longer(cols = starts_with("conc_"),
names_to = "growth_rate",
values_to = "concentration") %>%
mutate(growth_rate = case_when(
growth_rate == "conc_0.4"  ~ "0.4",
growth_rate == "conc_0.7"  ~ "0.7",
growth_rate == "conc_1.07" ~ "1.07",
growth_rate == "conc_1.6"  ~ "1.6",
growth_rate == "conc_2.5"  ~ "2.5"
)) %>%
mutate(growth_rate = factor(growth_rate, levels = c("0.4", "0.7", "1.07", "1.6", "2.5"), ordered = TRUE))
newggslopegraph(dongtable5_long,
Times = growth_rate,  # The growth rates (doublings per hour)
Measurement = concentration,  # Concentration values
Grouping = tRNA,   # The tRNA isoacceptor species
Title = "Slopegraph of tRNA Isoacceptor for Growth Rates",
SubTitle = "From 0.4 to 2.5 doublings/hour",
Caption = "Data source: dongtable5")
library(CGPfunctions)
dongtable5_long = dongtable5 %>%
pivot_longer(cols=starts_with("conc_"),
names_to="growth_rate",
values_to="concentration") %>%
mutate(growth_rate=case_when(
growth_rate=="conc_0.4" ~ "0.4",
growth_rate=="conc_0.7" ~ "0.7",
growth_rate=="conc_1.07" ~ "1.07",
growth_rate=="conc_1.6" ~ "1.6",
growth_rate=="conc_2.5" ~ "2.5"
)) %>%
mutate(growth_rate=factor(growth_rate, levels=c("0.4", "0.7", "1.07", "1.6", "2.5"), ordered=TRUE))
newggslopegraph(dongtable5_long,
Times=growth_rate,  # The growth rates (doublings per hour)
Measurement=concentration,  # Concentration values
Grouping=tRNA,   # The tRNA isoacceptor species
Title="Slopegraph of tRNA Isoacceptor for Growth Rates")
library(CGPfunctions)
dongtable5_long = dongtable5 %>%
pivot_longer(cols=starts_with("conc_"),
names_to="growth_rate",
values_to="concentration") %>%
mutate(growth_rate=case_when(
growth_rate=="conc_0.4" ~ "0.4",
growth_rate=="conc_0.7" ~ "0.7",
growth_rate=="conc_1.07" ~ "1.07",
growth_rate=="conc_1.6" ~ "1.6",
growth_rate=="conc_2.5" ~ "2.5"
)) %>%
mutate(growth_rate=factor(growth_rate, levels=c("0.4", "0.7", "1.07", "1.6", "2.5"), ordered=TRUE))
newggslopegraph(dongtable5_long,
Times=growth_rate,
Measurement=concentration,
Grouping=tRNA,
Title="Slopegraph of tRNA Isoacceptor for Growth Rates",
SubTitle="From 0.4 to 2.5 doublings/hour",
Caption="Data sourced from Dong. et al. (1996)")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
auto_install.cvec <- c("FDRestimation","lemon","BiocManager")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) install.packages(to.install)
bioc_install.cvec <- c("qvalue")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) BiocManager::install(to.install)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
parametric           = params$pp,
permutation          = params$permp,
wilcox               = params$wp,
permutation.set.pi0  = params$permp2,
list.permFDR0.02.setpi00.67  = params$p0.02
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
setwd("~/Desktop/FA 2024/QSB 282/Lab 9")
load("hedenfalk_log_scaled.RData")
setwd("~/Desktop/FA 2024/QSB 282/Lab 9")
load("hedenfalk_log_scaled.RData")
load("hedenfalk_log_scaled.RData")
load("hedenfalk_log_scaled.RData")
load("hedenfalk_log_scaled.RData")
load("hedenfalk_log_scaled.RData")
setwd("~/Desktop/FA 2024/QSB 282/Lab 9")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
auto_install.cvec <- c("FDRestimation","lemon","BiocManager")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) install.packages(to.install)
bioc_install.cvec <- c("qvalue")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) BiocManager::install(to.install)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
parametric    = params$pp
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
load("hedenfalk_log_scaled.RData")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
auto_install.cvec <- c("FDRestimation","lemon","BiocManager")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) install.packages(to.install)
bioc_install.cvec <- c("qvalue")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) BiocManager::install(to.install)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
parametric    = params$pp
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
load("hedenfalk_log_scaled.RData")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
auto_install.cvec <- c("FDRestimation","lemon","BiocManager")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) install.packages(to.install)
bioc_install.cvec <- c("qvalue")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) BiocManager::install(to.install)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
parametric           = params$pp,
permutation          = params$permp,
wilcox               = params$wp,
permutation.set.pi0  = params$permp2,
list.permFDR0.02.setpi00.67  = params$p0.02
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
load("hedenfalk_log_scaled.RData")
load("hedenfalk_log_scaled.RData")
load("~/Desktop/FA 2024/QSB 282/Lab 9/hedenfalk_log_scaled.RData")
load("~/Desktop/FA 2024/QSB 282/Lab 9/hedenfalk_log_scaled.RData")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
auto_install.cvec <- c("FDRestimation","lemon","BiocManager")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) install.packages(to.install)
bioc_install.cvec <- c("qvalue")
to.install <- auto_install.cvec[!(auto_install.cvec %in% installed.packages()[,"Package"])]
if(length(to.install)) BiocManager::install(to.install)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
parametric           = params$pp,
permutation          = params$permp,
wilcox               = params$wp,
permutation.set.pi0  = params$permp2,
list.permFDR0.02.setpi00.67  = params$p0.02
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
load("~/Desktop/FA 2024/QSB 282/Lab 9/hedenfalk_log_scaled.RData")
hedenfalk_log_scaled$t   <- apply(hedenfalk_log_scaled[,4:18],1,function(x)t.test(unlist(x[1:7]),unlist(x[8:15]))$statistic)
hedenfalk_log_scaled$t.p <- apply(hedenfalk_log_scaled[,4:18],1,function(x)t.test(unlist(x[1:7]),unlist(x[8:15]))$p.value)
library(qvalue)
data(hedenfalk)
numperms <- 3171*100
hedenfalk_log_scaled$t_perm.p <- sapply(hedenfalk_log_scaled$t,function(x)sum(abs(as.vector(hedenfalk$stat0)) >= abs(x))/numperms)
hedenfalk_log_scaled$wilcox.p <- apply(hedenfalk_log_scaled[,4:18],1,function(x)wilcox.test(unlist(x[1:7]),unlist(x[8:15]))$p.value)
library(FDRestimation)
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$t.p)
hedenfalk_log_scaled$t.p.fdrs <- p.fdr.obj$fdrs
plot(p.fdr.obj, main="FDR Statistics for Hedenfalk Data and Welch-Satterthwaite Parametric p-values")
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$t_perm.p)
hedenfalk_log_scaled$t_perm.p.fdrs <- p.fdr.obj$fdrs
plot(p.fdr.obj, main="FDR Statistics for Hedenfalk Data and Permutation p-values")
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$wilcox.p)
hedenfalk_log_scaled$wilcox.p.fdrs <- p.fdr.obj$fdrs
plot(p.fdr.obj, main="FDR Statistics for Hedenfalk Data and Wilcoxon p-values")
answer <- sum(hedenfalk_log_scaled$t.p.fdrs <= 0.05)
print_and_check(answer,"parametric")
answer <- sum(hedenfalk_log_scaled$wilcox.p.fdrs <= 0.05)
print_and_check(answer,"wilcox")
answer <- sum(hedenfalk_log_scaled$t_perm.p.fdrs <= 0.05)
print_and_check(answer,"permutation")
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$t_perm.p,set.pi0 = 0.67)
answer <- sum(p.fdr.obj$fdrs <= 0.05)
print_and_check(answer,"permutation.set.pi0")
plot(p.fdr.obj, main="FDR Statistics for Hedenfalk Data, Permutation p-values and Estimated 67% Fraction of Truly Null-Effect Genes")
answer <- hedenfalk_log_scaled[hedenfalk_log_scaled$t_perm.p.fdrs <= 0.02, 1:3]
print_and_check(answer,"list.permFDR0.02.setpi00.67")
p.fdr.obj
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$t_perm.p)
hedenfalk_log_scaled$t_perm.p.fdrs.67 <- p.fdr.obj$fdrs
answer <- hedenfalk_log_scaled[hedenfalk_log_scaled$t_perm.p.fdrs.67 <= 0.02, 1:3]
print_and_check(answer,"list.permFDR0.02.setpi00.67")
p.fdr.obj <- p.fdr(p=hedenfalk_log_scaled$t_perm.p,set.pi0 = 0.67)
hedenfalk_log_scaled$t_perm.p.fdrs.67 <- p.fdr.obj$fdrs
answer <- hedenfalk_log_scaled[hedenfalk_log_scaled$t_perm.p.fdrs.67 <= 0.02, 1:3]
print_and_check(answer,"list.permFDR0.02.setpi00.67")
setwd("~/")
load("~/Desktop/FA 2024/QSB 282/Lab 9/hedenfalk_log_scaled.RData")
setwd("~/")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
library(limma)
targets <- readTargets("~/Desktop/FA 2024/QSB 282/Lab 10/swirl/SwirlSample.txt")
RG <- read.maimages(targets, source="spot")
targets
library(limma)
targets <- readTargets("~/Desktop/FA 2024/QSB 282/Lab 10/swirl/SwirlSample.txt")
targets
RG <- read.maimages(targets, source="spot")
RG <- read.maimages(targets, source="spot")
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
library(limma)
targets <- readTargets("~/Desktop/FA 2024/QSB 282/Lab 10/swirl/SwirlSample.txt")
RG <- read.maimages(targets, source="spot")
pwd()
pwd
wd
Wd()
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
setwd("~/")
library(limma)
targets <- readTargets("~/Desktop/FA 2024/QSB 282/Lab 10/swirl/SwirlSample.txt")
RG <- read.maimages(targets, source="spot")
setwd("~/Desktop/FA 2024/QSB 282/Lab 10/swirl")
library(limma)
targets <- readTargets("~/Desktop/FA 2024/QSB 282/Lab 10/swirl/SwirlSample.txt")
RG <- read.maimages(targets, source="spot")
RG
# This chunk installs and loads libraries required by the notebook — Run it to install the packages.
if (!requireNamespace("knitr", quietly = TRUE))
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
##  PLAY THIS CODE CHUNK IN ORDER TO BE ABLE TO CHECK ANSWERS BY PLAYING CODE CHUNKS
knitr::opts_chunk$set(echo=TRUE,cache=FALSE,warning=FALSE, message=FALSE, collapse=TRUE)
checkdata <- list(
)
print_and_check <- function(answer,q){
print(paste0("Answer for problem ",q))
print(answer)
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
check <- function(answer,q){
check <- ifelse(digest::digest(answer) == checkdata[q], ## TEST
"CORRECT", ## TRUE
"INCORRECT") ## FALSE
print(unname(check))
}
setwd("~/Desktop/FA 2024/QSB 282/Lab 10/swirl")
library(limma)
targets <- readTargets("SwirlSample.txt")
RG <- read.maimages(targets, source="spot")
RG
RG$genes <- readGAL("fish.gal")
setwd("~/Desktop/FA 2024/QSB 282/Lab 10/swirl")
RG$genes <- readGAL("fish.gal")
RG$genes <- readGAL("fish.gal")
RG$genes <- readGAL("fish.gal")
RG$genes <- readGAL("fish.gal")
RG$genes <- readGAL("fish.gal")
setwd("~/Desktop/FA 2024/QSB 282/Lab 10/swirl")
RG$genes <- readGAL("fish.gal")
RG$printer <- getLayout(RG$genes)
imageplot(log2(RG$Rb[,1]), RG$printer, low="white", high="red")
imageplot(log2(RG$Gb[,1]), RG$printer, low="white", high="green")
MA_raw <- normalizeWithinArrays(RG, method="none")
imageplot(MA_raw$M[,1], RG$printer, zlim=c(-3,3))
plotMD(MA_raw, column = 1) ## column = 1 is the default
abline(0,0,col="blue")
plotPrintTipLoess(MA_raw, array = 1)  ## array = 1 is the default
library(ggokabeito)
boxplot(MA_raw$M[,1]~MA_raw$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Raw M vs Print-Tip for swirl.1")
boxplot(MA_raw$M[,2]~MA_raw$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Raw M vs Print-Tip for swirl.2")
boxplot(MA_raw$M[,3]~MA_raw$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Raw M vs Print-Tip for swirl.3")
boxplot(MA_raw$M[,4]~MA_raw$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Raw M vs Print-Tip for swirl.4")
MA_print_tip <- normalizeWithinArrays(RG,method="printtiploess")
# ^^^ method="printtiploess" is the default
plotMD(MA_print_tip)
abline(0,0,col="blue")
plotPrintTipLoess(MA_print_tip)
boxplot(MA_print_tip$M[,1]~MA_print_tip$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess) vs Print-Tip for swirl.1")
boxplot(MA_print_tip$M[,2]~MA_print_tip$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess) vs Print-Tip for swirl.2")
boxplot(MA_print_tip$M[,3]~MA_print_tip$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess) vs Print-Tip for swirl.3")
boxplot(MA_print_tip$M[,4]~MA_print_tip$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess) vs Print-Tip for swirl.4")
MA_print_tip_scale <- normalizeBetweenArrays(MA_print_tip,method="scale")
plotMD(MA_print_tip_scale)
abline(0,0,col="blue")
plotPrintTipLoess(MA_print_tip_scale)
boxplot(MA_print_tip_scale$M[,1]~MA_print_tip_scale$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess + scale) vs Print-Tip for swirl.1")
boxplot(MA_print_tip_scale$M[,2]~MA_print_tip_scale$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normlized M (printtiploess + scale) vs Print-Tip for swirl.2")
boxplot(MA_print_tip_scale$M[,3]~MA_print_tip_scale$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normalized M (printtiploess + scale)vs Print-Tip for swirl.3")
boxplot(MA_print_tip_scale$M[,4]~MA_print_tip_scale$genes$Block,xlab="Print-Tip",ylab="M",col=rep(palette_okabe_ito(1:8),each=2),main="Normalized M (printtiploess + scale) vs Print-Tip for swirl.4")
design <- modelMatrix(targets, ref="wild type")
design
fit_print_tip_scale <- lmFit(MA_print_tip_scale,design)
ebayes_print_tip_scale <- eBayes(fit_print_tip_scale) ## the current function is eBayes
qqt(ebayes_print_tip_scale$t,
df=ebayes_print_tip_scale$df.prior+ebayes_print_tip_scale$df.residual,pch=16,cex=0.2)
plotMD(ebayes_print_tip_scale)
abline(0,0,col="blue")
top30 <- order(ebayes_print_tip_scale$lods,decreasing=TRUE)[1:30]
text(ebayes_print_tip_scale$Amean[top30],ebayes_print_tip_scale$coef[top30],labels=ebayes_print_tip_scale$genes[top30,"Name"],cex=0.8,col="blue")
volcanoplot(ebayes_print_tip_scale,ylab="Surprisal (-logP)")
ordinary.t <- fit_print_tip_scale$coef / fit_print_tip_scale$stdev.unscaled / fit_print_tip_scale$sigma
head(ordinary.t)
library(tidyverse)
tibble(moderated_t=unname(ebayes_print_tip_scale$t),ordinary_t=unname(ordinary.t)) |> mutate(shrink=(abs(moderated_t) < abs(ordinary_t))) |> ggplot(aes(x=ordinary_t,y=moderated_t,color=shrink)) + geom_point(alpha=0.5) + labs(title="Effect of Limma Moderation on Gene-Wise t") +  scale_color_okabe_ito()
options(digits=3)
topTable(ebayes_print_tip_scale,number=30)
tt <- topTable(ebayes_print_tip_scale,n=Inf)
head(tt[tt$adj.P.Val <= 0.1,])
dim(tt[tt$adj.P.Val <= 0.1,])
dt <- decideTests(ebayes_print_tip_scale,p.value = 0.1)
summary(dt)
plotMD(ebayes_print_tip_scale,status=dt)
library(FDRestimation)
hist(ebayes_print_tip_scale$p.value)
ebayes.fit.fdr <- p.fdr(pvalues=ebayes_print_tip_scale$p.value,threshold = 0.1)
plot(ebayes.fit.fdr, main="Benjamini-Hochberg FDRs for Swirl")
plot(ebayes.fit.fdr,xlim = c(0,1500),ylim=c(0,0.2),main="Blowup for Benjamini-Hochberg FDRs for Swirl")
sum(ebayes.fit.fdr$fdrs <= 0.1)
sum(ebayes.fit.fdr$`Results Matrix`$`BH FDRs`<= 0.1)
sum(ebayes.fit.fdr$`Results Matrix`$`Adjusted p-values`<= 0.1)
sum(ebayes.fit.fdr$`Reject Vector` == "Reject.H0")
ebayes.fit.fdr.set.pi0 <- p.fdr(pvalues=ebayes_print_tip_scale$p.value,
set.pi0 = get.pi0(ebayes_print_tip_scale$p.value),threshold = 0.1)
plot(ebayes.fit.fdr.set.pi0,main="Benjamini-Hochberg FDRs for Swirl with pi0 estimation")
plot(ebayes.fit.fdr.set.pi0,xlim = c(0,1500),ylim=c(0,0.2),main="Blowup for Benjamini-Hochberg FDRs for Swirl with pi0 estimation")
sum(ebayes.fit.fdr.set.pi0$fdrs <= 0.1)
sum(ebayes.fit.fdr.set.pi0$`Results Matrix`$`BH FDRs`<= 0.1)
sum(ebayes.fit.fdr.set.pi0$`Results Matrix`$`Adjusted p-values`<= 0.1)
sum(ebayes.fit.fdr.set.pi0$`Reject Vector` == "Reject.H0")
